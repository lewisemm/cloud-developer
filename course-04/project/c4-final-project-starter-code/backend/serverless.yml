service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local

provider:
  tracing:
    lambda: true
    apiGateway: true
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    TODO_TABLE: Todo-${self:provider.stage}
    ATTACHMENTS_S3_BUCKET: attachments-icxpp-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    USER_INDEX: userIdIndex

custom:
  serverless-offline:
    httpPort: 4000

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages: # Add this section of the config
      - dev

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-GetTodos:*:*
      - Effect: Allow
        Action:
          - logs:PutLogEvents
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-GetTodos:*:*


  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-CreateTodo:*:*
      - Effect: Allow
        Action:
          - logs:PutLogEvents
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-CreateTodo:*:*

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-UpdateTodo:*:*
      - Effect: Allow
        Action:
          - logs:PutLogEvents
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-UpdateTodo:*:*

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-DeleteTodo:*:*
      - Effect: Allow
        Action:
          - logs:PutLogEvents
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-DeleteTodo:*:*

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-GenerateUploadUrl:*:*
      - Effect: Allow
        Action:
          - logs:PutLogEvents
        Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/serverless-todo-app-dev-GenerateUploadUrl:*:*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
